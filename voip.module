<?php
// $Id$

/**
 * @file
 * Enables communication between Drupal and VoIP servers.
 */

foreach (array('voip_error.inc', 'voip_log_server.inc') as $file) {
  require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'includes' . DIRECTORY_SEPARATOR . $file);
}



/**
 * Sends a request to the active voip server
 *
 * @param $request_id
 *   The id of the request to be executed
 *
 * @param $options
 *   An array of additional options as defined by each request
 */
function voip_send_request($request_id, $options = array()) {
  if(is_object($options)){
    $options = (array)$options;
  }

  $response[status] = TRUE;
  $voip_server = voip_default_server();

  if (function_exists($voip_server['send'])) {
    $response = $voip_server['send']($request_id, $options);
  }

  if (voip_error()) {
    $error_message = 'Failure executing request %request_id with options %options.';
    $variables['%request_id'] = $request_id;
    $variables['%options'] = print_r($options, TRUE);
    if (voip_error_message()) {
      $error_message .= ' The server said: '. voip_error_message();
    }
    watchdog('voip', $error_message, $variables, WATCHDOG_ERROR);

    // TODO: remove the following code block after xmlrpc testing is over
    if($options['xmlrpc_test']) {
      $error_message = ' The server said: '. voip_error_message();
      // report processing errors with http code 500 ('internal server error')
      $response = services_error($error_message, 500);
    }

  }
  return $response;
}


/*
* Implementation of hook_disable()
*/
function voip_disable() {
  cache_clear_all('services:methods', 'cache');
}

/*
* Implementation of hook_enable()
*/
function voip_enable() {
  cache_clear_all('services:methods', 'cache');
}

/*
* Implementation of hook_service()
*/
function voip_service() {
  $methods = array();

  $methods[] = array(
    '#method'   => 'voip.processRequest',
    '#callback' => 'voip_process_request',
    //'#key'     => FALSE,
    //'#auth'     => FALSE,
    '#args'     => array(
      array(
        '#name'         => 'request_id',
        '#type'         => 'string',
        '#description'  => t('Id of the request.'),
      ),
      array(
        '#name'         => 'options',
        '#type'         => 'array',
        '#description'  => t('Options associated with the specified request.'),
      ),
    ),
    '#return'   => 'array',
    '#help'     => t('Processes incoming requests from VoIP servers.')
  );

  $methods[] = array(
    '#method'   => 'voip.sendRequest',
    '#callback' => 'voip_send_request',
    //'#key'     => FALSE,
    //'#auth'     => FALSE,
    '#args'     => array(
      array(
        '#name'         => 'request_id',
        '#type'         => 'string',
        '#description'  => t('Id of the request.'),
      ),
      array(
        '#name'         => 'options',
        '#type'         => 'array',
        '#description'  => t('Options associated with the specified request.'),
      ),
    ),
    '#return'   => 'array',
    '#help'     => t('Send request to current VoIP server.')
  );

  return $methods;
}

/**
 * Implementation of hook_menu().
 */
function voip_menu() {
  $items = array();

  $items['admin/voip'] = array(
    'title' => 'Voip Drupal',
    'description' => 'Control how your site interacts with VoIP servers.',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer voip drupal framework'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system')
  );

  $items['admin/voip/servers'] = array(
    'title' => 'Voip server configuration',
    'description' => 'Configure voip servers and choose the default server.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('voip_admin_default_form', NULL),
    'access arguments' => array('administer voip drupal framework'),
    'file' => 'voip.admin.inc',
  );

  $items['admin/voip/servers/%'] = array(
    'title callback' => 'voip_admin_server_title',
    'title arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('voip_admin_server_form', 3),
    'access arguments' => array('administer voip drupal framework'),
    'type' => MENU_CALLBACK,
    'file' => 'voip.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function voip_perm() {
  return array('administer voip drupal framework');
}


/**
 * Implementation of hook_theme().
 */
function voip_theme() {
  $items['voip_admin_default_form'] = 
       array('arguments' => array('form' => NULL));

  return $items;
}


/**
 * Internal functions
 */

/**
 * Voip server menu title callback.
 */
function voip_admin_server_title($server_id) {
  $server = voip_servers('server', $server_id);
  return sprintf('%s server', $server['name']);
}

/**
 * Returns the current default voip server.
 */
function voip_default_server() {
  return voip_servers('server', variable_get('voip_default_server', 'log'));
}

/**
 * Calls hook_voip_server_info to retrieve a list of all voip servers
 * defined in the system.
 *
 * Similar to the SMS framework (http://drupal.org/node/362261),
 * hook_voip_server_info() might be defined as follows:
 *
 * function mymodule_voip_server_info() {
 *   return array(
 *     'my_voip_server_id' => array(
 *       'name' => 'My Voip Server',
 *       'send' => 'mymodule_send',
 *       'configure form' => 'mymodule_admin_form',
 *     );
 *   );
 * }
 * 
 * Where
 *    * name - Human readable name for the voip server.
 *    * send - Callback function that the Voip Framework will call to send a comand to the server
 *    * configure form (optional) - Form function for server configuration options
 *
 *
 * @param $op
 *   The format in which to return the list. When set to 'server' or 'name',
 *   only the specified server is returned. When set to 'servers' or 'names',
 *   all servers are returned.
 *
 * @param $server
 *   A server identifier string that indicates the server to return. Leave
 *   at the default value (NULL) to return all servers.
 *
 * @return
 *   Either an array of all servers or a single server, in a variable format.
 */
function voip_servers($op = 'servers', $server = NULL) {
  $_servers = array();
  $_names = array();

  $server_array = module_invoke_all('voip_server_info');
  foreach ($server_array as $identifier => $info) {
    // retrieve server-specific configuration
    $info['configuration'] = variable_get('voip_'. $identifier .'_settings', '');
    $_servers[$identifier] = $info;
    $_names[$identifier] = $info['name'];
  }
  asort($_names);

  switch ($op) {
    case 'servers':
      return $_servers;
    case 'server':
      $rc = $_servers[$server];
      $rc['identifier'] = $server;
      return $rc;
    case 'names':
      return $_names;
    case 'name':
      return $_names[$server];
  }
}

/**
 * Process requests received from VoIP servers.
 */
function voip_process_request($request_id, $options=array())
{
  $response = array();
  voip_error_reset();
  // process request
  foreach (module_implements('voip_process_request') as $module) {
    $function = $module .'_'. 'voip_process_request';
    $result = call_user_func($function, $request_id, $options);
    // stop at the first execution error
    if(voip_error()) {
      $error_message = voip_error_message(); // voip_error()->message;
      // report processing errors with http code 500 ('internal server error')
      $response = services_error($error_message, 500);
      break;
    }
    if (isset($result)) {
      $response = array_merge_recursive($response, $result);
    }
  }
  if (!$response) {
    $error_message = "(voip.module) Request $request_id not processed by any module.";
    // report http code 501 ('not implemented')
    $response = services_error($error_message, 501);
  }
  return $response;
}


