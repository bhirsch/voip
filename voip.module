<?php
// $Id$

/**
 * @file
 * Enables communication between Drupal and VoIP servers.
 */

foreach (array('voip_error.inc', 'voipserver.inc', 'voiplogserver.inc', 'voip_log_server.inc') as $file) {
  require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'includes' . DIRECTORY_SEPARATOR . $file);
}



/**
 * Make a phone call
 */
function voip_dial($voipcall) {
  if(is_object($voipcall)){
    $voipcall = (array)$voipcall;
  }

  $voip_server = voip_default_server();
  $response = $voip_server->dial($voipcall);

  if (voip_error()) {
    $error_message = 'Failure executing voip_dial() with %options.';
    $variables['%options'] = print_r($voipcall, TRUE);
    if (voip_error_message()) {
      $error_message .= ' The server said: '. voip_error_message();
    }
    watchdog('voip', $error_message, $variables, WATCHDOG_ERROR);
  }

  return $response;
}


/*
* Implementation of hook_service()
*/
function voip_service() {
  $methods = array();

  $methods[] = array(
    '#method'   => 'voip.processRequest',
    '#callback' => 'voip_process_request',
    //'#key'     => FALSE,
    //'#auth'     => FALSE,
    '#args'     => array(
      array(
        '#name'         => 'request_id',
        '#type'         => 'string',
        '#description'  => t('Id of the request.'),
      ),
      array(
        '#name'         => 'options',
        '#type'         => 'array',
        '#description'  => t('Options associated with the specified request.'),
      ),
    ),
    '#return'   => 'array',
    '#help'     => t('Processes incoming requests from VoIP servers.')
  );

  $methods[] = array(
    '#method'   => 'voip.sendRequest',
    '#callback' => 'voip_send_request',
    //'#key'     => FALSE,
    //'#auth'     => FALSE,
    '#args'     => array(
      array(
        '#name'         => 'request_id',
        '#type'         => 'string',
        '#description'  => t('Id of the request.'),
      ),
      array(
        '#name'         => 'options',
        '#type'         => 'array',
        '#description'  => t('Options associated with the specified request.'),
      ),
    ),
    '#return'   => 'array',
    '#help'     => t('Send request to current VoIP server.')
  );

  return $methods;
}

/**
 * Implementation of hook_menu().
 */
function voip_menu() {
  $items = array();

  $items['admin/voip'] = array(
    'title' => 'Voip Drupal',
    'description' => 'Control how your site interacts with VoIP servers.',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer voip drupal framework'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system')
  );

  $items['admin/voip/servers'] = array(
    'title' => 'Voip server configuration',
    'description' => 'Configure voip servers and choose the default server.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('voip_admin_default_form', NULL),
    'access arguments' => array('administer voip drupal framework'),
    'file' => 'voip.admin.inc',
  );

  $items['admin/voip/servers/%'] = array(
    'title callback' => 'voip_admin_server_title',
    'title arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('voip_admin_server_form', 3),
    'access arguments' => array('administer voip drupal framework'),
    'type' => MENU_CALLBACK,
    'file' => 'voip.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function voip_perm() {
  return array('administer voip drupal framework');
}


/**
 * Implementation of hook_theme().
 */
function voip_theme() {
  $items['voip_admin_default_form'] = 
       array('arguments' => array('form' => NULL));

  return $items;
}


/**
 * Internal functions
 */

/**
 * Voip server menu title callback.
 */
function voip_admin_server_title($server_id) {
  $server = VoipServer::getServer($server_id);
  return sprintf('%s server', $server->getName());
}

/**
 * Returns the current default voip server.
 */
function voip_default_server() {
  $server_id = variable_get('voip_default_server', 'log');
  $server = VoipServer::getServer($server_id);
  return $server;
}


/**
 * Process requests received from VoIP servers.
 */
function voip_process_request($request_id, $options=array())
{
  $response = array();
  voip_error_reset();
  // process request
  foreach (module_implements('voip_process_request') as $module) {
    $function = $module .'_'. 'voip_process_request';
    $result = call_user_func($function, $request_id, $options);
    // stop at the first execution error
    if(voip_error()) {
      $error_message = voip_error_message(); // voip_error()->message;
      // report processing errors with http code 500 ('internal server error')
      $response = services_error($error_message, 500);
      break;
    }
    if (isset($result)) {
      $response = array_merge_recursive($response, $result);
    }
  }
  if (!$response) {
    $error_message = "(voip.module) Request $request_id not processed by any module.";
    // report http code 501 ('not implemented')
    $response = services_error($error_message, 501);
  }
  return $response;
}


