<?php
/**
 * @file voipextension.module
 *   Create extension nodes for voip-enabled nodes and users. Implementation of Drupal API hooks.
 * 
 * @see voipextension.inc
 *   voipextension's own functions (not part of Drupal API).
 */ 

require_once('includes/voipextension.inc'); 

/**
 * Implementation of hook_help(). 
 */
function voipextension_help($path, $arg) {
  if ($path == 'admin/help#voipextension') {
    $txt = t('This module creates voip extensions '
            .'for voip-enabled users and nodes. ');
    return $txt;
  }
}

/** 
 * Implementation of hook_menu().
 */
function voipextension_menu() {
  $items = array();

  // Call back for auto-complete on node/add and node/edit form
  $items['voipextension/autocomplete'] = array(
    'title' => 'Voip Extension Autocomplete',
    'page callback' => 'voipextension_autocomplete',
    'access arguments' => array('edit extension'),
    'type' => MENU_CALLBACK,
  );
  // Voip-enable page
  $items['admin/voip/extensions-enable'] = array(
    'title' => t('Voip-enable users and node types'),
    'description' => t('Enable Voip and set up extensions for nodes and users.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('voipextension_admin_enable'), 
    'access arguments' => array('administer voip extensions'),
    'file' => 'includes/voipextension.admin.inc',
  );
  // Extensions default settings page
  $items['admin/voip/extensions-defaults'] = array(
    'title' => t('Set Voip extension defaults'),
    'description' => t('Set up default settings for Voip extensions.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('voipextension_admin_defaults'), 
    'access arguments' => array('administer voip extensions'),
    'file' => 'includes/voipextension.admin_defaults.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function voipextension_perm() {
  return array(
    'create extension',
    'delete extension',
    'edit extension',
    'view extension', 
  ); 
}

/**
 * Implementation of hook_access().
 */
function voipextension_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create extension', $account);
    case 'delete': 
      return user_access('delete extension', $account);
    case 'update': 
      return user_access('edit extension', $account);
    case 'view': 
      return user_access('view extension', $account);
  }
}

/**
 * Implementation hook_node_info().
 */
function voipextension_node_info() {
return array(
  'voipextension' => array(
    'name' => t('Voip Extension'),
    'module' => 'voipextension',
    'description' => t("Phone extension for voip-enabled nodes and users.'"),
    'help' => t(''), // TODO add instructions for manual extension management? 
    'has_title' => FALSE,
    'has_body' => FALSE,
    'locked' => TRUE,
  ),
);
}

/**
 * Implementation of hook_form().
 */
function voipextension_form(&$node, $form_state) {
  $type = node_get_types('type', $node);
  
 $form['ext'] = array(
    '#type' => 'item',
    '#title' => t('Extension Number'),
    '#value' => isset($node->ext) ? $node->ext : t('(auto number)'),
  );

  // get related node info
  if ($node->r_nid) {
    $r_node = node_load($node->r_nid);
    $form['r_nid'] = array(
      '#type' => 'item',
      '#title' => t('Related Node'),
      '#value' => ($r_node) ? l($r_node->title, "node/$r_node->nid") : '',
    );
  }

  // get related user info
  if ($node->r_uid) {
    $r_user = user_load($node->r_uid);
    $form['r_uid'] = array(
      '#type' => 'item',
      '#title' => t('Related User'),
      '#value' => ($r_user) ? l($r_user->name, "user/$r_user->uid") : '',
    );
  }

  $form['r_type'] = array(
    '#type' => 'item',
    '#title' => t('Related Node Type (or "user" if not a node)'),
    '#value' => isset($node->r_type) ? $node->r_type : '',
  );
  $form['r_script'] = array(
    '#type' => 'textfield',
    '#title' => t('Script Node ID'),
    '#size' => 30,
    '#default_value' => isset($node->r_script) ? $node->r_script : '',
    '#autocomplete_path' => 'voipextension/autocomplete'
  );
  $form['is_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Is Active'),
    '#default_value' => $node->is_active,
  );

  return $form;
}

/**
 * Implementation of hook_insert().
 */
function voipextension_insert($node) {
  if (!isset($node->r_nid)) {
    $node->r_nid = 0;
  } 
  if (!isset($node->r_uid)) {
    $node->r_uid = 0;
  } 
  if (!isset($node->r_type)) {
    $node->r_type = '';
  } 
  if (!isset($node->is_active)) {
    $node->is_active = 1;
  } 
  if (!isset($node->r_script)) {
    $node->r_script = 0;
  } 

  db_query('INSERT INTO {voip_extension} '
          .'(nid, vid, '
          .'r_nid, r_uid, r_type, is_active, r_script) ' 
          ."VALUES (%d, %d, %d, %d, '%s', %d, %d)",
          $node->nid,
          $node->vid,
          $node->r_nid, 
          $node->r_uid,
          $node->r_type,
          $node->is_active,
          $node->r_script);
}

/**
 * Implementation of hook_update().
 */
function voipextension_update(&$node){
  if ($node->revision) {
    voipextension_insert($node);
  } else {
    db_query("UPDATE {voip_extension} "
            ."SET r_nid = %d, r_uid = %d, r_type = '%s', "
            ."is_active = %d, r_script = %d "
            ."WHERE vid = %d ", 
            $node->r_nid, 
            $node->r_uid,
            $node->r_type,
            $node->is_active,
            $node->r_script,
            $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 */
function voipextension_delete(&$node) {
  db_query('DELETE FROM {voip_extension} WHERE nid = %d', 
            $node->nid);
}

/**
 * Implementation of hook_nodeapi().
 */
function voipextension_nodeapi(&$node, $op, $teaser, $page) {
  // Handle voipextension nodes here
  if ($node->type == 'voipextension') {
    if ($op == 'delete revision') {
      // Delete specific revisions of a voipextension node.
        db_query('DELETE FROM {voipextension} WHERE vid = %d', $node->vid);
    }

  // Handle all other node types (i.e. voip-enabled node types) here.
  } else if ($node->type != 'voipextension' && variable_get('voip_enable_'. $node->type, FALSE)) {
    switch($op) {
  
    // When a voip-enabled node is created, automatically create a corresponding extension.
    case 'insert': 
      // Create corresponding extension node.
      $ext = new stdClass();
      global $user;
      $ext->type = 'voipextension';
      $ext->uid = $user->uid; // author of extension
      $ext->r_nid = $node->nid; // related nid (from newly saved node)
      $ext->r_type = $node->type;
      // User-defined default is_active setting
      $var = 'voip_default_is_active_'. $node->type;
      $is_active = variable_get($var, FALSE);
      $ext->is_active = ($is_active) ? TRUE : FALSE; 
      // default script
      $var = 'voip_default_script_'. $node->type;
      $script = variable_get($var, FALSE);
      // TODO validate script. Make sure (1) it exists, (2) it works.
      if ($script) {
        $ext->r_script = $script; 
      } else {
        $ext->is_active = FALSE; // Set to inactive if there isn't a valid script. 
        $txt = t('This new extension does not have a valid default '
                .'script. Without a valid script, the extension will '
                .'not work. To activate this extension, click "Edit" below '
                .'and add a script. To prevent this error in the future, set a '
                .'default script !here.', 
                array('!here' => l('here', url('admin/voip/extensions-defaults', array('absolute' => TRUE)))));
        drupal_set_message($txt, 'warning');
      }
      // set node options from node_type_form
      $node_options = variable_get('node_options_voipextension', FALSE);
      $ext->status = (in_array('status', $node_options)) ? 1 : 0; 
      $ext->promote = (in_array('promote', $node_options)) ? 1 : 0; 
      $ext->sticky = (in_array('sticky', $node_options)) ? 1 : 0; 
      $ext->revision = (in_array('revision', $node_options)) ? 1 : 0; 
      // save it!
      node_save($ext);

      // Notify user about new extension node and relevant extension info.
      $ext_nid = $node->nid + 1;
      $output = theme('voipextension_created', $ext_nid); 
      drupal_set_message($output);
     
      break;

    // Add extension info to voip-enabled nodes on load. 
    // This will let other modules do things with extension info before 'view'.
    case 'load': 
      // TODO 
      break;

    // The node is about to be shown on the add/edit form.
    // Display extension info as form items. Provide user a link to edit
    // the corresponding phone extension. Specifically, the user may want to 
    // activate/de-activate the extension when editing a node, or change the script.
    case 'prepare': 
      // TODO
      break;

    case 'prepare translation': 
      // todo Prepare translated nodes with to show voip extensions.
      break;

    case 'print': 
      // todo Prepare print view of book pages to display extensions. 
      break;

    case 'rss item': 
      // todo Include extensions in rss items.
      break;

    case 'search result': 
      // todo Include extensions in search results.
      break;
 
    case 'update':
      // TODO Review D4 code for 'update'. Do we need all this stuff here? 
      break;

    // Theme extension info and attach it to the node view of voip-enabled nodes.
    // Info was already added to node object on 'load', so just theme it here.
    case 'view': 
      // TODO

      break;

    }
  }
}

/**
 * Implementation of hook_load().
 */
function voipextension_load($node) {
  $result = db_query('SELECT ext, r_nid, r_uid, r_type, is_active, r_script '
                    .'FROM {voip_extension} '
                    .'WHERE vid = %d ', $node->vid);
  return db_fetch_object($result);
}

/**
 * Implementation of hook_view().
 */
function voipextension_view($node, $teaser = FALSE, $page = FALSE) {
  // Prepare node
  $node = node_prepare($node, $teaser); 
  // Prepare extension fields
  $node->ext = check_plain($node->ext); // maybe unnecessary, but might as well
  $node->r_nid = check_plain($node->r_nid);
  $node->r_uid = check_plain($node->r_uid);
  $node->r_type = check_plain($node->r_type);
  $node->is_active = check_plain($node->is_active);
  $node->r_script = check_plain($node->r_script);
  // Theme extension fields
  $node->content['voipextension'] = array(
    '#value' => theme('voipextension', $node, $teaser, $page),
    '#weight' => 1,
  );

  return $node;
}

/**
 * Implementation of hook_theme().
 */
function voipextension_theme(){
  $path = drupal_get_path('module', 'voipextension') .'/theme';
  drupal_add_css("$path/voipextension.css");
  require_once "./$path/theme.inc";

  return array(
    'voipextension' => array(
      'template' => 'voip-extension',
      'file' => 'theme.inc',
      'arguments' => array('node' => NULL, 'teaser' => NULL, 'page' => NULL),
      'path' => $path,
    ),
    'voipextension_created' => array(
      'template' => 'voip-extension-created',
      'file' => 'theme.inc',
      'arguments' => array('nid' => NULL),
      'path' => $path,
    )
  );
}

/**
 * Implementation of hook_form_alter
 * 
 * Enable users to voip enable node types on node type page
 * (when creating or editing a node type).
 */
function voipextension_form_alter(&$form, $form_state, $form_id) {
  // Add voip settings to node type forms (except voipextension).
  if ($form_id == 'node_type_form' && $form['#node_type']->type != 'voipextension') {
    $form['voip'] = array(
      '#type' => 'fieldset',
      '#title' => 'Voip (voice over Internet) settings',
      '#name' => 'Voip',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['voip']['voip_enable'] = array(
      '#type' => 'checkbox',
      '#title' => 'Enable Voip',
      '#description' => t('Voip-enable this node type.'),
      '#default_value' => variable_get('voip_enable_'. $form['#node_type']->type, FALSE),
    );
  }
}
