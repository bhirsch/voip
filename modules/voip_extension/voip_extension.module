<?php
/**
 * @file
 *   Implement create directory of extensions to voip nodes and users. 
 */ 

/**
 * Implementation of hook_help(). 
 */
function voip_extension_help($path, $arg) {
  if ($path == 'admin/help#voip_extension') {
    $txt = t('This module creates voip extensions '
            .'for voip-enabled users and nodes. ');
    return $txt;
  }
}

/** 
 * Implementation of hook_menu().
 */
function voip_extension_menu() {
  $items = array();

  // call back for auto-complete on node/add and node/edit form
  $items['voip_extension/autocomplete'] = array(
    'title' => 'Voip Extension Autocomplete',
    'page callback' => 'voip_extension_autocomplete',
    'access arguments' => array('edit extension'),
    'type' => MENU_CALLBACK,
  );
  // settings page
  $items['admin/settings/voip_extension'] = array(
    'title' => t('Voip Phone Extensions'),
    'description' => t('Enable voip and set up extensions for nodes and users.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('voip_extension_admin_settings'), 
    'access arguments' => array('administer voip extensions'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'voip_extension.admin.inc',
  );

  return $items;
}

/**
 * Callback for voip_extension/autocomplete.
 * 
 * Populate autocomplete field in node/%/edit form for voip_extension nodes.
 */
function voip_extension_autocomplete() {
  $items = array();  
  $result = db_query("SELECT nid, title FROM {node} WHERE status = 1 AND type = 'voip_script' AND title LIKE '%s%%' ", $string);
  
  while($obj = db_fetch_object($result)) {
    $items[$obj->nid] = check_plain($obj->title);
  }
  print drupal_to_js($items); 
  exit();
}

/**
 * Implementation of hook_perm().
 */
function voip_extension_perm() {
  return array(
    'create extension',
    'delete extension',
    'edit extension',
    'view extension', 
  ); 
}

/**
 * Implementation of hook_access().
 */
function voip_extension_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create extension', $account);
    case 'delete': 
      return user_access('delete extension', $account);
    case 'update': 
      return user_access('edit extension', $account);
    case 'view': 
      return user_access('view extension', $account);
  }
}

/**
 * Implementation hook_node_info().
 */
function voip_extension_node_info() {
return array(
  'voip_extension' => array(
    'name' => t('Voip Extension'),
    'module' => 'voip_extension',
    'description' => t("Phone extension for voip-enabled nodes and users.'"),
    'help' => t(''), // TODO add instructions for manual extension management? 
    'has_title' => FALSE,
    'has_body' => FALSE,
    'locked' => TRUE,
  ),
);
}

/**
 * Implementation of hook_form().
 */
function voip_extension_form(&$node, $form_state) {
  $type = node_get_types('type', $node);
  require_once('voip_extension.node_form.inc');
  
  return $form;
}

/**
 * Implementation of hook_insert().
 */
function voip_extension_insert($node) {
  if (!isset($node->r_nid)) {
    $node->r_nid = 0;
  } 
  if (!isset($node->r_uid)) {
    $node->r_uid = 0;
  } 
  if (!isset($node->r_type)) {
    $node->r_type = '';
  } 
  if (!isset($node->is_active)) {
    $node->is_active = 1;
  } 
  if (!isset($node->r_script)) {
    $node->r_script = 0;
  } 

  db_query('INSERT INTO {voip_extension} '
          .'(nid, vid, '
          .'r_nid, r_uid, r_type, is_active, r_script) ' 
          ."VALUES (%d, %d, %d, %d, '%s', %d, %d)",
          $node->nid,
          $node->vid,
          $node->r_nid, 
          $node->r_uid,
          $node->r_type,
          $node->is_active,
          $node->r_script);
}

/**
 * Implementation of hook_update().
 */
function voip_extension_update(&$node){
  if ($node->revision) {
    voip_extension_insert($node);
  } else {
    db_query("UPDATE {voip_extension} "
            ."SET r_nid = %d, r_uid = %d, r_type = '%s', "
            ."is_active = %d, r_script = %d "
            ."WHERE vid = %d ", 
            $node->r_nid, 
            $node->r_uid,
            $node->r_type,
            $node->is_active,
            $node->r_script,
            $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 */
function voip_extension_delete(&$node) {
  db_query('DELETE FROM {voip_extension} WHERE nid = %d', 
            $node->nid);
}

/**
 * Implementation of hook_nodeapi().
 */
function voip_extension_nodeapi(&$node, $op, $teaser, $page) {
  // Handle voip_extension nodes here
  if ($node->type == 'voip_extension') {
    if ($op == 'delete revision') {
      // Delete specific revisions of a voip_extension node.
        db_query('DELETE FROM {voip_extension} WHERE vid = %d', $node->vid);
    }

  // Handle all other node types (i.e. voip-enabled node types) here.
  } else if ($node->type != 'voip_extension' && variable_get('voip_enable_'. $node->type, FALSE)) {
    switch($op) {
  
    // When a voip-enabled node is created, automatically create a
    // a corresponding extension node.
    case 'insert': 
      // Save to make nid available in $node.
      node_save($node);
     
      // Now create corresponding extension node.

      // Redirect to extension edit page to select a script.
     
      break;

    // Add extension info to voip-enabled nodes on load. 
    // This will let other modules do things with extension info before 'view'.
    case 'load': 
      // TODO 
      break;

    // The node is about to be shown on the add/edit form.
    // Display extension info as form items. Provide user a link to edit
    // the corresponding phone extension. Specifically, the user may want to 
    // activate/de-activate the extension when editing a node, or change the script.
    case 'prepare': 
      // TODO
      break;

    case 'prepare translation': 
      // todo Prepare translated nodes with to show voip extensions.
      break;

    case 'print': 
      // todo Prepare print view of book pages to display extensions. 
      break;

    case 'rss item': 
      // todo Include extensions in rss items.
      break;

    case 'search result': 
      // todo Include extensions in search results.
      break;

    // Theme extension info and attach it to to node view of voip-enabled nodes.
    // Info was already added to node object on 'load', so just theme it here.
    case 'view': 
      // TODO
      break;

    }
  }
}

/**
 * Implementation of hook_load().
 */
function voip_extension_load($node) {
  $result = db_query('SELECT ext, r_nid, r_uid, r_type, is_active, r_script '
                    .'FROM {voip_extension} '
                    .'WHERE vid = %d ', $node->vid);
  return db_fetch_object($result);
}

/**
 * Implementation of hook_view().
 */
function voip_extension_view($node, $teaser = FALSE, $page = FALSE) {
  // Prepare node
  $node = node_prepare($node, $teaser); 
  // Prepare extension fields
  $node->ext = check_plain($node->ext); // maybe unnecessary, but might as well
  $node->r_nid = check_plain($node->r_nid);
  $node->r_uid = check_plain($node->r_uid);
  $node->r_type = check_plain($node->r_type);
  $node->is_active = check_plain($node->is_active);
  $node->r_script = check_plain($node->r_script);
  // Theme extension fields
  $node->content['voip_extension'] = array(
    '#value' => theme('voip_extension', $node, $teaser, $page),
    '#weight' => 1,
  );

  return $node;
}

/**
 * Implementation of hook_theme().
 */
function voip_extension_theme(){
  $path = drupal_get_path('module', 'voip_extension') .'/theme';
  drupal_add_css("$path/voip_extension.css");
  require_once "./$path/theme.inc";

  return array(
    'voip_extension' => array(
      'template' => 'voip-extension',
      'file' => 'theme.inc',
      'arguments' => array('node' => NULL, 'teaser' => NULL, 'page' => NULL),
      'path' => $path,
    ),
  );
}

/**
 * Implementation of hook_form_alter
 * 
 * Enable users to voip enable node types on node type page
 * (when creating or editing a node type).
 */
function voip_extension_form_alter(&$form, $form_state, $form_id) {
  // Add voip settings to node type forms (except voip_extension).
  if ($form_id == 'node_type_form' && $form['#node_type']->type != 'voip_extension') {
    $form['voip'] = array(
      '#type' => 'fieldset',
      '#title' => 'Voip (voice over Internet) settings',
      '#name' => 'Voip',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['voip']['voip_enable'] = array(
      '#type' => 'checkbox',
      '#title' => 'Enable Voip',
      '#description' => t('Voip-enable this node type.'),
      '#default_value' => variable_get('voip_enable_'. $form['#node_type']->type, FALSE),
    );
  }
}
