<?php
/**
 * @file
 *   Implement create directory of extensions to voip nodes and users. 
 */ 

/**
 * Implementation of hook_help(). 
 */
function voip_extension_help($path, $arg) {
  if ($path == 'admin/help#voip_extension') {
    $txt = t('This module creates voip extensions '
            .'for voip-enabled users and nodes. ');
    return $txt;
  }
}

/**
 * Implementation of hook_perm().
 */
function voip_extension_perm() {
  return array(
    'create extension',
    'delete extension',
    'edit extension',
    'view extension', 
  ); 
}

/**
 * Implementation of hook_access().
 */
function voip_extension_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create extension', $account);
    case 'delete': 
      return user_access('delete extension', $account);
    case 'update': 
      return user_access('edit extension', $account);
    case 'view': 
      return user_access('view extension', $account);
  }
}

/**
 * Implementation hook_node_info().
 */
function voip_extension_node_info() {
return array(
  'voip_extension' => array(
    'name' => t('Voip Extension'),
    'module' => 'voip_extension',
    'description' => t("Phone extension for voip-enabled nodes and users.'"),
    'help' => t(''), // TODO add instructions for manual extension management? 
    'has_title' => FALSE,
    'has_body' => FALSE,
    'locked' => TRUE,
  ),
);
}

/**
 * Implementation of hook_form().
 */
function voip_extension_form(&$node, $form_state) {
  $type = node_get_types('type', $node);
  require_once('voip_extension.node_form.inc');
  
  return $form;
}

/**
 * Implementation of hook_insert().
 */
function voip_extension_insert($node) {
  if (!isset($node->r_nid)) {
    $node->r_nid = 0;
  } 
  if (!isset($node->r_uid)) {
    $node->r_uid = 0;
  } 
  if (!isset($node->r_type)) {
    $node->r_type = '';
  } 
  if (!isset($node->is_active)) {
    $node->is_active = 1;
  } 
  if (!isset($node->r_script)) {
    $node->r_script = 0;
  } 

  db_query('INSERT INTO {voip_extension} '
          .'(nid, vid, '
          .'r_nid, r_uid, r_type, is_active, r_script) ' 
          ."VALUES (%d, %d, %d, %d, '%s', %d, %d)",
          $node->nid,
          $node->vid,
          $node->r_nid, 
          $node->r_uid,
          $node->r_type,
          $node->is_active,
          $node->r_script);
}

/**
 * Implementation of hook_update().
 */
function voip_extension_update(&$node){
  if ($node->revision) {
    voip_extension_insert($node);
  } else {
    db_query("UPDATE {voip_extension} "
            ."SET r_nid = %d, r_uid = %d, r_type = '%s', "
            ."is_active = %d, r_script = %d "
            ."WHERE vid = %d ", 
            $node->r_nid, 
            $node->r_uid,
            $node->r_type,
            $node->is_active,
            $node->r_script,
            $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 */
function voip_extension_delete(&$node) {
  db_query('DELETE FROM {voip_extension} WHERE nid = %d', 
            $node->nid);
}

/**
 * Implementation of hook_nodeapi().
 */
function voip_extension_nodeapi(&$node, $op, $teaser, $page) {
  if ($op == 'delete revision') {
    db_query('DELETE FROM {voip_extension} WHERE vid = %d', 
             $node->vid);
  }  
}

/**
 * Implementation of hook_load().
 */
function voip_extension_load($node) {
  $result = db_query('SELECT ext, r_nid, r_uid, r_type, is_active, r_script '
                    .'FROM {voip_extension} '
                    .'WHERE vid = %d ', $node->vid);
  return db_fetch_object($result);
}

/**
 * Implementation of hook_view().
 */
function voip_extension_view($node, $teaser = FALSE, $page = FALSE) {
  // Prepare node
  $node = node_prepare($node, $teaser); 
  // Prepare extension fields
  $node->ext = check_plain($node->ext); // maybe unnecessary, but might as well
  $node->r_nid = check_plain($node->r_nid);
  $node->r_uid = check_plain($node->r_uid);
  $node->r_type = check_plain($node->r_type);
  $node->is_active = check_plain($node->is_active);
  $node->r_script = check_plain($node->r_script);
  // Theme extension fields
  $node->content['voip_extension'] = array(
    '#value' => theme('voip_extension', $node, $teaser, $page),
    '#weight' => 1,
  );

  return $node;
}

/**
 * Implementation of hook_theme().
 */
function voip_extension_theme(){
  $path = drupal_get_path('module', 'voip_extension') .'/theme';
  drupal_add_css("$path/voip_extension.css");
  require_once "./$path/theme.inc";

  return array(
    'voip_extension' => array(
      'template' => 'voip-extension',
      'file' => 'theme.inc',
      'arguments' => array('node' => NULL, 'teaser' => NULL, 'page' => NULL),
      'path' => $path,
    ),
  );
}


