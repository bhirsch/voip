<?php
// Automatically generated by features module.
include_once('callblast.features.inc');

// Custom code and logic.
include_once('includes/callblast.inc');
include_once('includes/callblast.script.inc');

/**
 * @file callblast.module
 *   Drupal hooks implemented for VOIP call blasts.
 */ 
/**
 * Implementation of hook_help(). 
 */
function callblast_help($path, $arg) {
  if ($path == 'admin/help#callblast') {
    $txt = t('This module creates provides voip '
            .'call blast functionality. ');
    return $txt;
  }
}

/**
 * Implementation of hook_menu().
 */
function callblast_menu() {
  $items = array();

 // Call back for auto-complete on node/add and node/edit form
  $items['callblast/list/autocomplete'] = array(
    'title' => 'Call Blast Autocomplete List',
    'page callback' => 'callblast_list_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/callblast.inc',
  );
  
  return $items;
}

/**
 * Implementation of hook_block().
 */
function callblast_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Call Blast Status');
    return $blocks;
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0: 
        $block['subject'] = t('Call Blast Status');
        $block['content'] = theme('callblast_block'); 
      break;
    }
    return $block; 
  }
}

/**
 * Implementation of hook_theme().
 */
function callblast_theme() {
  return array(
    'callblast_block' => array(
      'arguments' => array(),
    ),
  );
}

/**
 * Callback for theme_callblast_block().
 * 
 * Create a block with links to views included
 * in callblast feature module.
 * 
 * @return
 *  $output, html, content of block
 */
function theme_callblast_block() {
  $output = '<div class="callblast">';

  // link to call blast page View
  $txt = t('Call Blasts');
  $path = 'callblast';
  $output .= '<h4>'. l($txt, $path) .'</h4>';

  $txt = t('Calls');
  $path = 'callstatus';
  $output .= '<h4>'. l($txt, $path) .'</h4>';
  
  $output .= '</div>';

  return $output;
}

/**
 * Implementation of hook_views_data().
 * 
 * Expose callblast_call table to views, so voipcall
 * nodes can be filtered in Views based on the callblast that 
 * created them.
 */
function callblast_views_data() {
  $data = array();

  // callblast_call table
  $data['callblast_call']['table']['group'] = t('Node');

  // link callblast_call table to node table, join on callblast_nid
  $data['callblast_call']['table']['join']['node'] = array(
// TODO verify left_field v. field is correct here
    'left_field' => 'nid',
    'field' => 'callblast_nid',
  );

  // link callblast_call table to node table, join on voipcall_nid
  $data['callblast_call']['table']['join']['node'] = array(
    'left_field' => 'nid',
    'field' => 'voipcall_nid',
  );

  // callblast_call.callblast_nid field
  $data['callblast_call']['callblast_nid'] = array( 
    'group' => t('Node'),
    'title' => t('Call Blast Nid'),
    'help' => t('The node ID of the Call Blast node.'),
    'argument' => array(
      // todo? 'handler' => '',
      'name field' => 'title', // the field to display in the summary.
      'numeric' => TRUE,
      'validate type' => 'nid',
    ),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  // Call Blast Name field
  $data['callblast_call']['callblast_name'] = array( 
    'group' => t('Node'),
    'title' => t('Call Blast Name'),
    'help' => t('The node ID of the Call Blast node.'),
    'argument' => array(
      // todo? 'handler' => '',
      'name field' => 'title', // the field to display in the summary.
      'numeric' => TRUE,
      'validate type' => 'nid',
    ),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  // callblast_call.voipcall_nid field
  $data['callblast_call']['voipcall_nid'] = array(
    'group' => t('Node'),
    'title' => t('Voip Call Nid'),
    'help' => t('The node ID of the Voip Call node.'),
    'argument' => array(
      // todo? 'handler' => '',
      'name field' => 'title', // the field to display in the summary.
      'numeric' => TRUE,
      'validate type' => 'nid',
    ),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  return $data;
}

/**
 * Implementation of hook_form_alter().
 * 
 * TODO Delete this is we don't end up using voipfield.
 */
function callblast_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'callblast_node_form') {
    /**
     * If voipfield module is NOT enabled
     * hide the Main Message URL field. 
     */
    if(!function_exists('voipfield_form_alter')) {
      $form['field_callblast_audio_url']['#type'] = 'hidden';
    }
  }
}

/**
 * On cron, run call blasts.
 * 
 * TODO Add test call before running call blast.
 * TODO Enable user to schedule date/time for test call and blast.
 * TODO Call node_save to update list before running blast. If people have been deleted from a dynamic list, don't call them.
 * 
 * Implementation of hook_cron().
 */
function callblast_cron() {
  // Check for call blasts that have been scheduled but not sent.
  $sql = "SELECT n.nid, n.vid " 
        ."FROM {node} n " 
        ."JOIN {content_type_callblast} cb ON n.nid = cb.nid "
        ."WHERE field_blast_sent_value = 0 ";
  $result = db_query($sql);

  // @todo these should be added to a queue. Lots of big lists could get messy.
  // loop through unblasted blast lists and blast them
  while ($row = db_fetch_object($result)) {
    $callblast_nid = $row->nid;
    $callblast_vid = $row->vid;
  
    // Check when call is scheduled to get sent. 
    // Skip if it's scheduled for later.
    $node = node_load($callblast_nid);
    $start_time =  $node->field_callblast_scheduled_start[0]['value'];
    // TODO Add timezone handling.
    // $timezone = $node->field_callblast_scheduled_start[0]['timezone'];
    $now = time();
    if ($start_time <= $now) {

      // Get selected call list.
      $list = callblast_list($node);
      // Save call list. (Each number on list must
      // be stored as a voipcall node.)
      callblast_save_voipcalls($list, $node);

      // get list of voipcall nids 
      // voip.module gets the phone numbers from the voipcall node
      $sql = 'SELECT voipcall_nid FROM {callblast_call} WHERE callblast_nid = %d'; 
      $result2 = db_query($sql, $callblast_nid);

      // place phone calls to each number on the list, one-by-one
      while ($voipcall_nid = db_result($result2)) { 
        $voipcall_node = node_load($voipcall_nid);    

        // $request_id, Type of call being requested.
        $request_id = 'voip_dial_out';

        // place outgoing call
        voip_send_request($request_id, $voipcall_node);
      }
      // Update node to indicate that blast has been sent.
      db_query("UPDATE {content_type_callblast} "
              ."SET field_blast_sent_value = 1 " 
              ."WHERE nid = %d " 
              ."AND vid = %d ",
               $callblast_nid, $callblast_vid);

      // Clear cache to reflect update.
      cache_clear_all('content:'. $callblast_nid .':'. $callblast_vid, content_cache_tablename()); 

      // Log call blast with watchdog
      $type = 'call blast';
      $message = t("Call blast nid-$callblast_nid sent.");
      $severity = WATCHDOG_NOTICE;
      watchdog($type, $message);
    } // end if ($start_time <= $now)
  } // end while
}

/**
 * TODO delete? cruft.
 * 
 * Batch call back operation: Save voipcall nodes.
 * 
 * @param
 *  $size, number of phone numbers to save per pass 
 * 
 * @param
 *  $list, full call list with phone numbers and any other 
 *  details supplied by the module that created it.
 * 
 *  $node, callblast node, including default values to send to voipcall_save().
 */
function callblast_save_voipcall_nodes($size, $list, $details, $node) {
  // Initialize sandbox the first time through.
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 1;
    $context['sandbox']['i'] = 0;
    $context['sandbox']['max'] = count($list);
  }
  
  // set range of numbers to be processed
  $i = $context['sandbox']['i'];
  $j = 0;
  $max = $context['sandbox']['max']; 

  // save up voipcall nodes from $list
  while ($i < $max && $j < $size) {
    if ($list[$i]['destination']) {
      $details['destination'] = $list[$i]['destination'];
      // save voipcall node
      voipcall_save($details);
      // store callblast_nid / voipcall_nid pairs in  callblast_call table
      $callblast_call->voipcall_nid = db_last_insert_id('node', 'nid');
      $callblast_call->callblast_nid = $node->nid;
      drupal_write_record('callblast_call', $callblast_call);
    } else {
      // no destination number
      // TODO Add validation/error handling here. 
      //   Right now we're just checking for something or nothing. 
      //   But, for example, a 6 digit phone number should trigger an error too.
      drupal_set_message(t('Invalid destination number on call list.'), 'warning');
    }
    $i++;
  }

  // update progress information
  $context['sandbox']['progress']++;
  $context['sandbox']['i'] = $i;
  $context['message'] = t('Scheduling %callnum', array('%callnum' => $list[$i]['destination']));

  // Let the batch engine know how close we are to completion.
  if ($context['sandbox']['progress'] == $context['sandbox']['max']) {
    // Done!
    $context['finished'] = 1;
    $context['results'] = $context['sandbox']['max'];
    // incase 'finished' function wants to use these
  } else {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }  
}

/**
 * Batch finished. Called when batch operations are complete.
 */
function callblast_save_voipcall_nodes_finished($success, $results, $operations) {
  if ($success) {
    $txt = t('Call blast set up complete.');
    drupal_set_message($txt);
  } else {
    // a fatal error occurred during batch processing
    $error_operation = reset($operations);
    $operation = array_shift($error_operation);
    $arguments = array_shift($error_operation);
    $arguments_as_string = implode(', ', $arguments);
    watchdog('callblast', "Error when calling operation '%s'('%s')", array($operation, $arguments_as_string));
    drupal_set_message(t('An error occurred and has been recorded in the system log.'), 'error');
  }
}
//==========================================//
// DEFINING THE CALLIST WIDGET
// see example:  http://www.lullabot.com/articles/creating-custom-cck-fields
//==========================================//

/**
* Implementation of hook_widget_info().
*
* Here we indicate that the content module will handle
* the default value and multiple values for these widgets.
*
* Callbacks are omitted because default handing is used.
*/
function callblast_widget_info() {
  return array(
    // The machine name of the widget
    'callblast_calllist' => array(
      'label' => t('Call List'),
      'field types' => array('text'),
      // 'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
* Implementation of hook_widget_settings().
* 
* TODO Add hok_widget_settings(). 
* Allow multiple values? (e.g. combine call lists 
* like "summer volunteers" + "interns" CiviCRM groups?)
*/

/**
* Implementation of hook_widget().
*
* @param $form
*   the entire form array, 
*   $form['#node'] holds node information
* @param $form_state
*   the form_state, 
*   $form_state['values'][$field['field_name']]
*   holds the field's form values.
* @param $field
*   the field array
* @param $items
*   array of default values for this field
* @param $delta
*   the order of this item in the array of 
*   subelements (0, 1, 2, etc)
*
* @return
*   the form item for a single element for this field
*/
function callblast_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element['value'] = array(
    // todo Decide if this is all we need. This is all that's included in nodereference hook_widget. 
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#value_callback' => 'callblast_autocomplete_value',
    // todo Decide if we need this stuff below. nodereference hook_widget doesn't have these here.
    '#title' => t('Call List'), 
    '#autocomplete_path' => 'callblast/list/autocomplete',
    '#size' =>  60,
    '#attributes' => array('class' => 'callblast_calllist'),
    '#maxlength' => !empty($field['max_length']) ? $field['max_length'] : NULL,
  );
  
  // Used so that hook_field('validate') knows where to 
  // flag an error in deeply nested forms.
  if (empty($form['#parents'])) {
    $form['#parents'] = array();
  }
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($form['#parents'], array('value'))),
  );
  return $element;
}

/**
 * Value for a calllist autocomplete element.
 *
 * Substitute in the list title for list id.
 */
function callblast_autocomplete_value($element, $edit = FALSE) {
dsm($element);
  $list_id = $element['#default_value'];
dsm($field_key);
  // if (!empty($element['#default_value'][$field_key])) {
  if (!empty($list_id)) {
    $value = calllist_callblast_get_list($list_id, 'list name');
    $value .= ' ['. $list_id .']';
    return $value;
// TODO This probably needs to be processed. Otherwise list name gets saved WITH human readable name in it.
// CONTINUE HERE. 
  }
  // TODO handle this
  return array($field_key => NULL);
}

//=============//
// End Widget
//=============//

/**
 * Invoke hook_callblast_get_list to get 
 * the numbers on the list from the module 
 * (or, modules if there are more than one)
 * that provided it.
 * 
 * @param
 *  $node object
 * 
 * @return
 *  string, callblast list selected on callblast node.
 */
function callblast_list($node) {
  $list_name = check_plain($node->field_callblast_calllist[0]['value']);
  $list = module_invoke_all('callblast_get_list', $list_name);

  return $list;
}

/**
 * TODO get rid of this? cruft. no longer in use.
 * 
 * Save a callblast list. This function uses
 * Batch API to process a list of calls and selected
 * callblast options to generated voipcall nodes for
 * each number on the list.
 * 
 * @param
 *  $list, an array of numbers to be called. 
 * 
 * @param
 *  $node, object, a callblast node.
 */
function callblast_save_list($list, $node) {
  // Set up batch 
  $size = 5; // save up 5 nodes at a time
  // generic call details from callblast node
  $details['script'] = $node->field_callblast_script[0]['nid'];
  $details['caller number'] = $node->field_callblast_caller_number[0]['value'];
  $details['caller name'] = $node->field_callblast_caller_name[0]['value'];
  $details['parent node'] = $node->nid;
  $details['scheduled start'] = $node->field_callblast_scheduled_start[0]['value'];
  // batch
  $batch = array(
     'operations' => array(
       array('callblast_save_voipcall_nodes', array($size, $list, $details, $node),),
       ),
     'finished' => 'callblast_save_voipcall_nodes_finished',
     'title' => t('Scheduling calls'),
     'init_message' => t('Creating records for each phone number on call list'),
     'progress_message' => t('Scheduled @current of @total calls.'),
     'error_message' => t('Processing error'),
  );
  $url = "node/$node->nid";
  // Save voipcall nodes
  batch_set($batch);
  batch_process($url);
}

/**
 * @param
 *  $list, an array of numbers to be called. 
 * 
 * @param
 *  $node, object, a callblast node.
 */
function callblast_save_voipcalls($list, $node) {
  // generic call details from callblast node
  $details['caller number'] = $node->field_callblast_caller_number[0]['value'];
  $details['caller name'] = $node->field_callblast_caller_name[0]['value'];
  $details['parent node'] = $node->nid; // TODO delete?
  $details['scheduled start'] = $node->field_callblast_scheduled_start[0]['value'];
  $details['script_name'] = 'callblast_message'; 

  // store URL to audio message in script_variable
  $message_path = $node->field_callblast_audio_file[0]['filepath'];
  //  global $base_url;
  // $message_url = $base_url .'/'. $message_path;
  $message_url = $message_path;
  $message_url = check_url($message_url);
  $message_url = drupal_urlencode($message_url);
  // call forwarding number
  $forward_to_number = $node->field_callblast_call_forward[0]['value']; 

  // options
  $options_url = drupal_urlencode(check_url($node->field_callblast_audio_options[0]['filepath']));
  // message one
  $one_url = drupal_urlencode(check_url($node->field_callblast_audio_one[0]['filepath']));
  // message two
  $two_url = drupal_urlencode(check_url($node->field_callblast_audio_two[0]['filepath']));
  // message three
  $three_url = drupal_urlencode(check_url($node->field_callblast_audio_three[0]['filepath']));
  // message four
  $four_url = drupal_urlencode(check_url($node->field_callblast_audio_four[0]['filepath']));
  // message five
  $five_url = drupal_urlencode(check_url($node->field_callblast_audio_five[0]['filepath']));

  // store voipcall variables
  $details['script_variables'] = array(
    'message_url' => $message_url, 
    'forward_to_number' => $forward_to_number,
    'options_url' => $options_url,
    'one_url' => $one_url,
    'two_url' => $two_url,
    'three_url' => $three_url,
    'four_url' => $four_url,
    'five_url' => $five_url,
  );

  // save up voipcall nodes from $list
  $i = 0;
  $count = count($list);
  while ($i < $count) {
    if ($list[$i]['destination']) {
      $details['dest_number'] = $list[$i]['destination'];
      // save voipcall node
      voipcall_save($details);
      // store callblast_nid / voipcall_nid pairs in  callblast_call table
      $callblast_call->voipcall_nid = db_last_insert_id('node', 'nid');
      $callblast_call->callblast_nid = $node->nid;
      drupal_write_record('callblast_call', $callblast_call);
    } else {
      // no destination number
      // TODO Add validation/error handling here. 
      //   Right now we're just checking for something or nothing. 
      //   But, for example, a 6 digit phone number should trigger an error too.
      drupal_set_message(t('Invalid destination number on call list.'), 'warning');
    }
    $i++;
  }
}
