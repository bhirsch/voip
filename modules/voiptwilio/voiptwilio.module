<?php
// $Id$

/**
 * @file
 * Adds support for sending and receiving VoIP requests to and from Twilio.
 */

//-----------------------------------------------------------------------------
// Include files
//-----------------------------------------------------------------------------
foreach (array('voiptwilio.inc') as $file) {
  require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'includes' . DIRECTORY_SEPARATOR . $file);
}


//-----------------------------------------------------------------------------
// Public functions
//-----------------------------------------------------------------------------

/**
 * Implementation of hook_voip_server_info().
 */
function voiptwilio_voip_server_info() {
  return array(
    'twilio' => array(
      'name' => 'Twilio',
      'configure form' => 'voiptwilio_admin_form',
      'send' => 'voiptwilio_send',
    ),
  );
}

function voiptwilio_admin_form($configuration) {
  $form['voiptwilio_account_sid'] = array(
    '#type' => 'textfield',
    '#title' => t('Twilio Account SID'),
    '#description' => t("The account SID provided in your Twilio account dashboard."),
    '#default_value' => ($configuration['voiptwilio_account_sid']?$configuration['voiptwilio_account_sid']:''),
  );

  $form['voiptwilio_auth_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Twilio Auth Token'),
    '#description' => t("The authorization token provided in your Twilio account dashboard."),
    '#default_value' => ($configuration['voiptwilio_auth_token']?$configuration['voiptwilio_auth_token']:''),
  );

  return $form;
}

/**
 * Validates the submission of the configuration form.
 */
function voiptwilio_admin_form_validate($form, &$form_state) {

  // Send a test request to validate the configuration of the Twilio server
  $values = $form_state['values'];
  $result = _voiptwilio_ping($values);

  if(voip_error()){
    form_set_error('', t('A Twilio-related error occurred: @error', array('@error' => voip_error_message())));
  }
}

/**
 * Callback for sending requests to Twilio
 */
function voiptwilio_send($request_id, $options) {
  $server = voip_servers('server', 'twilio');
  $config = $server['configuration'];
dsm("config is: " . print_r($config,true));
  $result =  voiptwilio_send_request($config, $request_id, $options);
  return $result;
}

/**
 * Sends a request to Twilio
 */
function voiptwilio_send_request($server_config, $request_id, $options) {
dsm("in send_request config is: " . print_r($server_config,true));


  switch($request_id) {
    default:
      // Invalid request id
      $response = FALSE;
      $error_message = "Invalid request id received: %request_id.";
      $variables = array('%request_id' => $request_id);
      watchdog('voiptwilio', $error_message, $variables, WATCHDOG_ERROR);
      voip_error("(voiptwilio) Invalid request id received: " . $request_id);
      break;

    case 'voip_dial_out': // dial the given call node
      // call node
      $call_node = (object)$options;
      $response = _voiptwilio_dial_out($server_config, $call_node);
      break;
  }

  return $response;
}

/*
 * Implementation of hook_perm()
 */
function voiptwilio_perm() {
  return array('access voiptwilio content');
}

/*
 * Implementation of hook_menu()
 */
function voiptwilio_menu() {
  $items = array();

  $items['voip/twilio/callhandler'] = array(
    'title' => 'Voip Twilio call handler',
    'description' => 'Handles incoming calls from Twilio.',
    'access arguments' => array('access voiptwilio content'), // TODO: define appropriate permissions
    'page callback' => '_voiptwilio_call_handler',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/*
 * Internal functions
 */

/*
 * Process incoming requests and responses from Twilio
 *
 * @param string $call_id with the call's unique identifier.  If NULL, the
 * call is coming from Twilio and 'CallGuid' should be used as the unique id.
 *
 */
function _voiptwilio_call_handler($call_id=NULL) {

$msg = "in voiptwilio_call_handler() with call_id: $call_id and _REQUEST: " . print_r($_REQUEST, TRUE);
$vars = array();
watchdog('voiptwilio', $msg, $vars, WATCHDOG_INFO);
dsm($msg);

// TODO: Validate $_REQUEST['AccountGuid'] to avoid hack attempts

  // load the variables already associated with the call, if any
  if($call_id) {
    $call_nid = voipcall_get_nid_from_call_id($call_id);
    $call = (array)node_load($call_nid);
  }
  else {
    $call = array();
    $call_guid = $_REQUEST['CallGuid']; // unique identifier of the call, 34 char
    $call['call_id'] = $call_guid;
    $call['source'] = 'twilio';
    $call['start_time'] = time();
    $call['status'] = VOIPCALL_NOT_CALLED;
    // for the sake of consistency, init the new node before updating it
    $call = (array)voipcall_save($call);
  }

  // update common call variables
  if(!isset($call['caller_number'])) $call['field_voipcall_caller_number'][0]['value'] = $_REQUEST['Caller'];
  if(!isset($call['caller_name'])) $call['field_voipcall_caller_name'][0]['value'] = $_REQUEST['CallerName'];
  if(!isset($call['dest_number'])) $call['field_voipcall_dest_number'][0]['value'] = $_REQUEST['Called'];

  // store call location, if available
  $call_location = array();
  if(isset($_REQUEST['CallerCity'])) $call_location['caller_city'] = $_REQUEST['CallerCity'];
  if(isset($_REQUEST['CallerState'])) $call_location['caller_state'] = $_REQUEST['CallerState'];
  if(isset($_REQUEST['CallerZip'])) $call_location['caller_zip'] = $_REQUEST['CallerZip'];
  if(isset($_REQUEST['CallerCountry'])) $call_location['caller_country'] = $_REQUEST['CallerCountry'];

  if(isset($_REQUEST['CalledCity'])) $call_location['called_city'] = $_REQUEST['CalledCity'];
  if(isset($_REQUEST['CalledState'])) $call_location['called_state'] = $_REQUEST['CalledState'];
  if(isset($_REQUEST['CalledZip'])) $call_location['calldr_zip'] = $_REQUEST['CalledZip'];
  if(isset($_REQUEST['CalledCountry'])) $call_location['called_country'] = $_REQUEST['CalledCountry'];
  if($call_location) {
    // TODO: what to do about serialize/unserialize?
    $variables = unserialize($call['field_voipcall_script_commands'][0]['value']); 
    $variables['call_location'] = $call_location;
    $call['script_variables'] = $variables;
  }

  $dial_status = isset($_REQUEST['DialStatus'])?$_REQUEST['DialStatus']:NULL;
  $hangup = FALSE;

  // handle new incoming calls
  if($dial_status) {
    switch($dial_status){
      default:
        $call['status'] = VOIP_CALL_ERROR;
        $error_message = 'Invalid DialStatus: ' . $dial_status;
        $call['error_message'] = $error_message;
        watchdog('voiptwilio', $error_msg, array(), WATCHDOG_ERROR);
        $hangup = TRUE;
        break;
      case 'failed':
        $call['status'] = VOIP_CALL_ERROR;
        $error_message = 'Twilio processing error';
        $call['error_message'] = $error_message;
        watchdog('voiptwilio', $error_msg, array(), WATCHDOG_ERROR);
        $hangup = TRUE;
        break;
      case 'answered':
        $call['status'] = VOIP_CALL_ANSWERED;
        break;
      case 'busy':
        $call['status'] = VOIP_CALL_BUSY;
        $hangup = TRUE;
        break;
      case 'no-answer':
        $call['status'] = VOIP_CALL_NO_ANSWER;
        $hangup = TRUE;
        break;
      case 'answered-machine':
        $call['status'] = VOIP_CALL_ANSWERED_MACHINE;
        break;
      case 'answered-human':
        $call['status'] = VOIP_CALL_ANSWERED_HUMAN;
        break;
      case 'hangup-machine':
        $call['status'] = VOIP_CALL_MACHINE_HANGUP;
        $hangup = TRUE;
        break;
    }
  }

  // process requests/responses from ongoing calls
  else {
    $call_status = $_REQUEST['CallStatus']; 
    switch($call_status) {
      default:
        $call['status'] = VOIP_CALL_ERROR;
        $error_message = 'Invalid CallStatus: ' . $call_status;
        $call['error_message'] = $error_message;
        watchdog('voiptwilio', $error_msg, array(), WATCHDOG_ERROR);
        $hangup = TRUE;
        break;
      case 'failed':
        $call['status'] = VOIP_CALL_ERROR;
        $error_message = 'Twilio processing error';
        $call['error_message'] = $error_message;
        watchdog('voiptwilio', $error_msg, array(), WATCHDOG_ERROR);
        $hangup = TRUE;
        break;
      case 'in-progress':
        $call['status'] = VOIP_CALL_ANSWERED;
        break;
      case 'completed':
        $call['status'] = VOIP_CALL_COMPLETED;
        $hangup = TRUE;
        break;
      case 'busy':
        $call['status'] = VOIP_CALL_BUSY;
        $hangup = TRUE;
        break;
      case 'no-answer':
        $call['status'] = VOIP_CALL_NO_ANSWER;
        $hangup = TRUE;
        break;
    }
  }

  if($hangup) {
    $call['end_time'] = time();
    $duration = isset($_REQUEST['Duration'])?$_REQUEST['Duration']:NULL;
    if(!$duration) {
      if(isset($call['start_time'])) {
        $duration  = $call['end_time'] - $call['start_time'];
      }
    }
    $call['duration'] = $duration;
  }

  // update the voipcall node with the new values
  $call = voipcall_save($call);

  // process the call script
 $r = voiptwilio_script_handler($call);

}

/**
 * Process voipcall scripts
 *
 * @param $voipcall, node with the call information
 *
 * @return boolean.  TRUE on success or FALSE on failure.  Check voip_error() for processing failure.
 */

function voiptwilio_script_handler($voipcall) {
dsm('entering voiptwilio_script_handler()');
dsm($voipcall);

    // TODO: do we have to differentiate inbound X outbound calls here?

  $rc = TRUE;

  // retrive script context
/*****
 *    'script_name', the name of the current dialplan script
 *    'script_commands', array with the script commands
 *    'script_index', the index of the current command
 *    'script_variables', variables accessed and updated by the script
*****/


  // add call variables to script variables

  // check status of the call and process script accordingly
    // TODO: create special script just for hangup situations?

  // send response back to Twilio
  $output = '<?xml version="1.0" encoding="UTF-8" ?>';
  $output .= '<!--' . "voipcall: " . print_r($voipcall,true) . '-->';
  $output .= '
      <Response> 
        <Say>Hello World</Say>
        <Play>http://api.twilio.com/Cowbell.mp3</Play>
      </Response> ';

  drupal_set_header('Content-Type: text/xml; charset=utf-8');
  print $output;
dsm('does this get executed?');
  return $rc;
}
