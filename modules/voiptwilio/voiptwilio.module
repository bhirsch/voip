<?php
// $Id$

/**
 * @file
 * Adds support for sending and receiving VoIP requests to and from Twilio.
 */

//-----------------------------------------------------------------------------
// Include files
//-----------------------------------------------------------------------------
foreach (array('voiptwilio.inc') as $file) {
  require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'includes' . DIRECTORY_SEPARATOR . $file);
}


//-----------------------------------------------------------------------------
// Public functions
//-----------------------------------------------------------------------------

/**
 * Implementation of hook_voip_server_info().
 */
function voiptwilio_voip_server_info() {
  return array(
    'twilio' => array(
      'name' => 'Twilio',
      'configure form' => 'voiptwilio_admin_form',
      'send' => 'voiptwilio_send',
    ),
  );
}

function voiptwilio_admin_form($configuration) {
  $form['voiptwilio_account_sid'] = array(
    '#type' => 'textfield',
    '#title' => t('Twilio Account SID'),
    '#description' => t("The account SID provided in your Twilio account dashboard."),
    '#default_value' => ($configuration['voiptwilio_account_sid']?$configuration['voiptwilio_account_sid']:''),
  );

  $form['voiptwilio_auth_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Twilio Auth Token'),
    '#description' => t("The authorization token provided in your Twilio account dashboard."),
    '#default_value' => ($configuration['voiptwilio_auth_token']?$configuration['voiptwilio_auth_token']:''),
  );

  return $form;
}

/**
 * Validates the submission of the configuration form.
 */
function voiptwilio_admin_form_validate($form, &$form_state) {

  // Send a test request to validate the configuration of the Twilio server
  $values = $form_state['values'];
  $result = _voiptwilio_ping($values);

  if(voip_error()){
    form_set_error('', t('A Twilio-related error occurred: @error', array('@error' => voip_error_message())));
  }
}

/**
 * Callback for sending requests to Twilio
 */
function voiptwilio_send($request_id, $options) {
  $server = voip_servers('server', 'twilio');
  $config = $server['configuration'];
dsm("config is: " . print_r($config,true));
  $result =  voiptwilio_send_request($config, $request_id, $options);
  return $result;
}

/**
 * Sends a request to Twilio
 */
function voiptwilio_send_request($server_config, $request_id, $options) {
dsm("in send_request config is: " . print_r($server_config,true));


  switch($request_id) {
    default:
      // Invalid request id
      $response = FALSE;
      $error_message = "Invalid request id received: %request_id.";
      $variables = array('%request_id' => $request_id);
      watchdog('voiptwilio', $error_message, $variables, WATCHDOG_ERROR);
      voip_error("(voiptwilio) Invalid request id received: " . $request_id);
      break;

    case 'voip_dial_out': // dial the given call node
      // call node
      $call_node = (object)$options;
      $response = _voiptwilio_dial_out($server_config, $call_node);
      break;
  }

  return $response;
}

/*
* Implementation of hook_disable()
*/
function voiptwilio_disable() {
  cache_clear_all('services:methods', 'cache');
}

/*
* Implementation of hook_enable()
*/
function voiptwilio_enable() {
  cache_clear_all('services:methods', 'cache');
}

/*
 * Implementation of hook_perm()
 */
function voiptwilio_perm() {
  return array('access voiptwilio content');
}

/*
 * Implementation of hook_menu()
 */
function voiptwilio_menu() {
  $items = array();

  $items['voip/twilio/callhandler'] = array(
    'title' => 'Voip Twilio call handler',
    'description' => 'Handles incoming calls from Twilio.',
    'access arguments' => array('access voiptwilio content'), // TODO: define appropriate permissions
    'page callback' => '_voiptwilio_call_handler',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/*
 * Internal functions
 */

/*
 * Process incoming calls from Twilio
 *
 * @param string $call_id with the call's unique identifier.  If NULL, the
 * call is coming from Twilio and 'CallGuid' should be used as the unique id.
 *
 */
function _voiptwilio_call_handler($call_id=NULL) {

$msg = "in voiptwilio_call_handler() with call_id: $call_id and _REQUEST: " . print_r($_REQUEST, TRUE);
$vars = array();
watchdog('voiptwilio', $msg, $vars, WATCHDOG_INFO);


  // create voipcall node based on input received
  $accound_sid = $_REQUEST['AccountSid'];
  $account_guid = $_REQUEST['AccountGuid']; // account code
$z = $_REQUEST['CallSid'];
  $call_guid = $_REQUEST['CallGuid']; // unique identifier of the call, 34 char
  $caller_number = $_REQUEST['Caller'];
  $caller_name = $_REQUEST['CallerName']; // optional
  $dest_number = $_REQUEST['Called'];
  $status = $REQUEST['CallStatus']; // One of the following: "failed", "no-answer", "in-progress", "busy", "completed".

$z = $_REQUEST['DialStatus']; // for outgoing calls: answered, busy, failed, or no-answer. If answering machine detection is being used, the additional values answered-machine, answered-human, and hangup-machine may be sent, depending on your settings. For incoming calls, DialStatus is always reported as "answered"

$z = $_REQUEST['CallSegmentGuid'];
$z = $_REQUEST['Duration']; // upon complete

$z = $_REQUEST['CallerCity'];
$z = $_REQUEST['CallerState'];
$z = $_REQUEST['CallerZip'];
$z = $_REQUEST['CallerCountry'];

$z = $_REQUEST['CalledCity'];
$z = $_REQUEST['CalledState'];
$z = $_REQUEST['CalledZip'];
$z = $_REQUEST['CalledCountry'];

  switch($status) {
    default:
      break;
    case 'in-progress':
      $call_status = 'XXX';
      break;
  }
  

  // call voiptwilio_script_handler()

  // send response back to Twilio
  $output = '<?xml version="1.0" encoding="UTF-8" ?>';
  $output .= '
      <Response> 
        <Say>Hello World</Say>
        <Play>http://api.twilio.com/Cowbell.mp3</Play>
      </Response> ';

  drupal_set_header('Content-Type: text/xml; charset=utf-8');
  print $output;
}

