<?php
// $Id$

/**
 * @file
 * Keeps track of the calls made and received by the Voip Drupal system
 */

/**
 * Stores information about a given call
 *
 * @param string $module Name of the module calling the function
 *
 * @param $call_id Unique identifier associated with the call
 *
 * @param $call_status One of the following: 'uncalled', 'dialing', 'invalid number', 'no answer', 'busy', 'answered', 'hang up'
 *
 */
function voip_tracker_set_call_info($module, $call_id, $call_status=NULL, $caller_number=NULL, $callee_number=NULL, $uid=NULL, $script_name=NULL, $vars=NULL){
  watchdog('voip_tracker', '[@module] Call info for call id %call_id:: status: @call_status, caller: @caller, callee: @callee, uid: @uid, script: @script_name, vars: @vars',
    array('%call_id' => $call_id, '@call_status' => $call_status, '@caller' => $caller_number, '@callee' => $callee_number, '@module' => $module, '@uid' => $uid, '@script_name' => $script_name, '@vars' => print_r($vars, TRUE)), WATCHDOG_INFO);

  $table = 'voip_tracker_call_list';

  $new_data = array();
  $new_data['call_id'] = $call_id;
  if(!is_null($caller_number)){ $new_data['caller_number'] = $caller_number; };
  if(!is_null($callee_number)){ $new_data['callee_number'] = $callee_number; };
  $new_data['module'] = $module;
  if(!is_null($uid)){ $new_data['uid'] = $uid; };
  if(!is_null($script_name)){ $new_data['script_name'] = $script_name; };
// TODO: mark vars as 'serialized' in the db schema to avoid the need for serialization...    
  if(!is_null($vars)){ $new_data['vars'] = serialize($vars); };
  if(!is_null($call_status)){ $new_data['call_status'] = $call_status; };
  $new_data['dispatch_time'] = time();

  $update = array();

  // determine if a record for the call already exists in the database
//  $count = db_result(db_query("SELECT COUNT(*) FROM {$table} WHERE call_id = '%s'", $call_id));
  $call_info = db_fetch_array(db_query("SELECT * FROM {$table} WHERE call_id = '%s'", $call_id));
watchdog('voip_tracker', 'call_info: %call_info', array('%call_info' => print_r($call_info,true)), WATCHDOG_INFO);

  if($call_info == FALSE){
    // create new record
watchdog('voip_tracker', '[@module] Creating id %call_id with: @new_data', array('%call_id' => $call_id, '@new_data' => print_r($new_data,true)), WATCHDOG_INFO);
    $rc = drupal_write_record($table,$new_data,$update);
watchdog('voip_tracker', 'write_record result: @rc', array('@rc' => print_r($rc,true)), WATCHDOG_INFO);
  }
  else {
    // update existing record
    $new_data = array_merge($call_info, $new_data);
watchdog('voip_tracker', '[@module] Updating id %call_id with: @new_data', array('%call_id' => $call_id, '@new_data' => print_r($new_data,true)), WATCHDOG_INFO);
    $update = 'call_id'; // the database key to be used for the updates
    $rc = drupal_write_record($table,$new_data,$update);
watchdog('voip_tracker', 'write_record result: @rc', array('@rc' => print_r($rc,true)), WATCHDOG_INFO);
  }

  return;
}

/**
 * Get status information about a given call
 */
function voip_tracker_get_call_status($call_id){
  $query = "SELECT c.call_status FROM {voip_tracker_call_list} c WHERE c.call_id = %d ORDER BY c.dispatch_time DESC";
  $db_entry = db_fetch_array(db_query($query, $call_id));
  $call_status = $db_entry['call_status'];

  return $call_status;
}
